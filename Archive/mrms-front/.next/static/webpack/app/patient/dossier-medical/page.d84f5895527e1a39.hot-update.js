"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/patient/dossier-medical/page",{

/***/ "(app-pages-browser)/./src/services/patientService.js":
/*!****************************************!*\
  !*** ./src/services/patientService.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./src/services/api.js\");\n// services/patientService.js\n\nconst patientService = {\n    /**\n     * Inscrire un nouveau patient\n     * @param {Object} patientData - Données du patient\n     * @returns {Promise} - Promesse avec les données de l'utilisateur créé\n     */ inscription: async (patientData)=>{\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/auth/inscription-patient\", patientData);\n            return response.data;\n        } catch (error) {\n            // Transformer l'erreur pour qu'elle soit plus facilement utilisable\n            if (error.response) {\n                // Le serveur a répondu avec un code d'erreur\n                const errorMsg = error.response.data.message || \"Erreur lors de l'inscription\";\n                throw {\n                    ...error,\n                    userMessage: errorMsg\n                };\n            }\n            throw {\n                ...error,\n                userMessage: \"Probl\\xe8me de connexion au serveur\"\n            };\n        }\n    },\n    /**\n     * Récupérer tous les patients\n     * @param {Object} options - Options de pagination et recherche\n     * @returns {Promise} - Promesse avec les patients récupérés\n     */ getPatients: async function() {\n        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { page = 1, limite = 10, recherche = \"\", typePatientId = \"\" } = options;\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/clients\", {\n                params: {\n                    page,\n                    limite,\n                    recherche,\n                    typePatientId\n                }\n            });\n            return response.data;\n        } catch (error) {\n            if (error.response) {\n                const errorMsg = error.response.data.message || \"Erreur lors de la r\\xe9cup\\xe9ration des patients\";\n                throw {\n                    ...error,\n                    userMessage: errorMsg\n                };\n            }\n            throw {\n                ...error,\n                userMessage: \"Probl\\xe8me de connexion au serveur\"\n            };\n        }\n    },\n    /**\n     * Récupérer un patient par son ID\n     * @param {number} id - ID du patient\n     * @returns {Promise} - Promesse avec les données du patient\n     */ getPatientById: async (id)=>{\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/clients/\".concat(id));\n            return response.data;\n        } catch (error) {\n            if (error.response) {\n                const errorMsg = error.response.data.message || \"Erreur lors de la r\\xe9cup\\xe9ration du patient\";\n                throw {\n                    ...error,\n                    userMessage: errorMsg\n                };\n            }\n            throw {\n                ...error,\n                userMessage: \"Probl\\xe8me de connexion au serveur\"\n            };\n        }\n    },\n    /**\n     * Récupérer le profil du patient connecté\n     * @returns {Promise} - Promesse avec les données du profil du patient\n     */ getMyProfile: async ()=>{\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/auth/moi\");\n            console.log(\"Profile response:\", response.data);\n            return response.data;\n        } catch (error) {\n            if (error.response) {\n                const errorMsg = error.response.data.message || \"Erreur lors de la r\\xe9cup\\xe9ration du profil\";\n                throw {\n                    ...error,\n                    userMessage: errorMsg\n                };\n            }\n            throw {\n                ...error,\n                userMessage: \"Probl\\xe8me de connexion au serveur\"\n            };\n        }\n    },\n    /**\n     * Mettre à jour le profil du patient connecté\n     * @param {Object} profileData - Données du profil à mettre à jour\n     * @returns {Promise} - Promesse avec les données du profil mis à jour\n     */ updateMyProfile: async (profileData)=>{\n        try {\n            // Structurer les données pour correspondre à l'attente de l'API\n            // Basé sur la structure retournée par /auth/moi\n            const payload = {\n                // Si dateNaissance est au niveau racine\n                dateNaissance: profileData.dateNaissance,\n                // Mettre à jour les informations du client\n                client: {\n                    nom: profileData.nom,\n                    prenom: profileData.prenom,\n                    email: profileData.email,\n                    telephone: profileData.telephone\n                }\n            };\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/patients/profil\", payload);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error updating profile:\", error);\n            if (error.response) {\n                const errorMsg = error.response.data.message || \"Erreur lors de la mise \\xe0 jour du profil\";\n                throw {\n                    ...error,\n                    userMessage: errorMsg\n                };\n            }\n            throw {\n                ...error,\n                userMessage: \"Probl\\xe8me de connexion au serveur\"\n            };\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (patientService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/patientService.js\n"));

/***/ })

});